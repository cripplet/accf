// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#ifndef PROTOBUF_messages_2eproto__INCLUDED
#define PROTOBUF_messages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace accf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_messages_2eproto();
void protobuf_AssignDesc_messages_2eproto();
void protobuf_ShutdownFile_messages_2eproto();

class Point;
class Particle;

// ===================================================================

class Point : public ::google::protobuf::Message {
 public:
  Point();
  virtual ~Point();

  Point(const Point& from);

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Point& default_instance();

  void Swap(Point* other);

  // implements Message ----------------------------------------------

  Point* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double coord = 1;
  inline int coord_size() const;
  inline void clear_coord();
  static const int kCoordFieldNumber = 1;
  inline double coord(int index) const;
  inline void set_coord(int index, double value);
  inline void add_coord(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      coord() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_coord();

  // @@protoc_insertion_point(class_scope:accf.Point)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< double > coord_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static Point* default_instance_;
};
// -------------------------------------------------------------------

class Particle : public ::google::protobuf::Message {
 public:
  Particle();
  virtual ~Particle();

  Particle(const Particle& from);

  inline Particle& operator=(const Particle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Particle& default_instance();

  void Swap(Particle* other);

  // implements Message ----------------------------------------------

  Particle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Particle& from);
  void MergeFrom(const Particle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .accf.Point location = 1;
  inline bool has_location() const;
  inline void clear_location();
  static const int kLocationFieldNumber = 1;
  inline const ::accf::Point& location() const;
  inline ::accf::Point* mutable_location();
  inline ::accf::Point* release_location();
  inline void set_allocated_location(::accf::Point* location);

  // optional double radius = 2;
  inline bool has_radius() const;
  inline void clear_radius();
  static const int kRadiusFieldNumber = 2;
  inline double radius() const;
  inline void set_radius(double value);

  // optional double mass = 3;
  inline bool has_mass() const;
  inline void clear_mass();
  static const int kMassFieldNumber = 3;
  inline double mass() const;
  inline void set_mass(double value);

  // @@protoc_insertion_point(class_scope:accf.Particle)
 private:
  inline void set_has_location();
  inline void clear_has_location();
  inline void set_has_radius();
  inline void clear_has_radius();
  inline void set_has_mass();
  inline void clear_has_mass();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::accf::Point* location_;
  double radius_;
  double mass_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static Particle* default_instance_;
};
// ===================================================================


// ===================================================================

// Point

// repeated double coord = 1;
inline int Point::coord_size() const {
  return coord_.size();
}
inline void Point::clear_coord() {
  coord_.Clear();
}
inline double Point::coord(int index) const {
  return coord_.Get(index);
}
inline void Point::set_coord(int index, double value) {
  coord_.Set(index, value);
}
inline void Point::add_coord(double value) {
  coord_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
Point::coord() const {
  return coord_;
}
inline ::google::protobuf::RepeatedField< double >*
Point::mutable_coord() {
  return &coord_;
}

// -------------------------------------------------------------------

// Particle

// optional .accf.Point location = 1;
inline bool Particle::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Particle::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Particle::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Particle::clear_location() {
  if (location_ != NULL) location_->::accf::Point::Clear();
  clear_has_location();
}
inline const ::accf::Point& Particle::location() const {
  return location_ != NULL ? *location_ : *default_instance_->location_;
}
inline ::accf::Point* Particle::mutable_location() {
  set_has_location();
  if (location_ == NULL) location_ = new ::accf::Point;
  return location_;
}
inline ::accf::Point* Particle::release_location() {
  clear_has_location();
  ::accf::Point* temp = location_;
  location_ = NULL;
  return temp;
}
inline void Particle::set_allocated_location(::accf::Point* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
}

// optional double radius = 2;
inline bool Particle::has_radius() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Particle::set_has_radius() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Particle::clear_has_radius() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Particle::clear_radius() {
  radius_ = 0;
  clear_has_radius();
}
inline double Particle::radius() const {
  return radius_;
}
inline void Particle::set_radius(double value) {
  set_has_radius();
  radius_ = value;
}

// optional double mass = 3;
inline bool Particle::has_mass() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Particle::set_has_mass() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Particle::clear_has_mass() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Particle::clear_mass() {
  mass_ = 0;
  clear_has_mass();
}
inline double Particle::mass() const {
  return mass_;
}
inline void Particle::set_mass(double value) {
  set_has_mass();
  mass_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace accf

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_messages_2eproto__INCLUDED
